using System;

/*
    There is a robot starting at position (0, 0), the origin, on a 2D plane.
    Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

    The move sequence is represented by a string, and the character moves[i] represents its ith move.
    Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true.
    Otherwise, return false.

    Note: The way that the robot is "facing" is irrelevant.
    "R" will always make the robot move to the right once, "L" will always make it move left, etc.
    Also, assume that the magnitude of the robot's movement is the same for each move.

    Example 1:

    Input: "UD"
    Output: true 
    Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started.
    Therefore, we return true.
 

    Example 2:

    Input: "LL"
    Output: false
    Explanation: The robot moves left twice. It ends up two "moves" to the left of the origin.
    We return false because it is not at the origin at the end of its moves.

    Results: Runtime: 80 ms, faster than 92.56% of C# online submissions for Robot Return to Origin.
             Memory Usage: 23.8 MB, less than 16.67% of C# online submissions for Robot Return to Origin.
 */

namespace Robot_Return_to_Origin
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Ex1: Return to start?: " + JudgeCircle("UD"));
            Console.WriteLine("Ex2: Return to start?: " + JudgeCircle("LL"));
            Console.WriteLine("Ex3: Return to start?: " + JudgeCircle("DURURDUUDUDDLDUUDDDLLDDUDRDUDUDLUDRRLRURUDULLDLRLRDUDLULDDLLDUDDDUDRRDRRLRLUUURLUULDRLRUUDRDDURLUULRDDRRUDRDDLRDLLLDUDLURDLUDDRDDDULLRDLUURLLRRUDLLDRULLDURLDLRLRRUDRDRRDRDRLDRRRDULDLDLLUURLRDDRDLLLDDRURLLULDRRLDDULRRLULURUDLDRUUDLRDDLUDUDURRDUUUURLUDRRDULRULRDULLDULLUULURUURUULLUUDUDLLULURRDLDLLUDRURRRRRRRUDLUDRURDLRRRRLUDULRURLURDRLDLLDUUDDRLUDUUURRRRURLRRDLRURLRUDDDDDRLUDRDDRLDLDULULDRURLURURRDUDLDUDLDURLRDRDLURLLUDLURRRULLDRRUURDLUDLRURLDLLUUDULRUDLRDDLRUDRUDURDDDUDURLLDLRLLDLRLULUDURDLLLRLDURLDULULDDUUULDLDRLURUULDLURDLULDLRDDRRLURLULRLRLDRLDUULLDLURLLDDDLLULUUDLDRDRRRULDDLLUDRLDLURRDULRUURUDDDDLDULDLRRDDRLUDRRDLLRLULLULLLRURLDRULDRDLDUUDDRURDRLRRUDULULLUDUDUURDRDUUDULRULLDDUDDULDRLRDLUDRUDRDUUDDDLRULDLRRLUURRDLDURUUURUDLDDLRLUDDURRRLLDRLULRLRRDRRDRRLDUUURLUUUURRRLDDDRDRLULDDLURDRDLRDLRULRURRRLDURLRDDDDRLLDLDLDRDUURRULRUDLRRRRRDLULRDDDRRRDDUULDULUDURDDDDUUURDRRRLUDUUURDDUDUDDLDLLDURLDRRDRUULURRDRRDLULLDLRLUDDLLDDULDRRUUULURDDLULUUURDRLURRDLDLRLUUDRUDRRDLULUDUDDDURULRRLUDRLDDLDRDLUDDLRDUULDDULDRLRLDDLRDUULLDDRRLUUUULUUUDDURLRDDDRRRLURLLDRUDRLDRLDDLDLULLRULDLRUDRLDLURURRDLDLLRURLDDLUUDULLLDLRUUURUURURULDLUULULUDUUDLURURDRLDRRUURRULRLRLRUURLUURULDDDDULULUUDUUUUURRLLDDLLUDLDURRDUULURRLRRURRURRRRDLURULRDDUDURLUUDURULLRLDLRDDLULUUDDRDLUDUUDLUDRUURLLLDRUUUDLUURDDUULLUULUDDULUULULULRRRRUULUUDDLDDURDULDDRDRRDDRUDLRDDRDDDDLLRURUULLDURLRDLRLRLLDULLDDRRLUDURDRUDDLLLDDDLRUDLRRRRDDDLUUUDDUULRURDLLRURULLDRUURURUDURLURRDURRRURULDRLUUDLDULDRLUUUDRLDLDRLULLUDLRLLDLLLURRRULDULDDDRRUULLDUUDLRUUDLRRURLRLLLULUDULDRLDDULDDURUUUDLRURLLLDUUDLDLLRRDDDLDRULRRLURRLLRDDDULDURUDDLUDUDLLRDLDDLUDDRRURDDUDRLDLLRRURUUDLRUUDDDRDLDDDDULLURDLDRUULDRRDUDUUDLLLDRULULRUUDDULRDDUDUDURLDURDLDRULRDDRRUURLDRUUULUDLDLDURDRURUUULRDRLUULRLRRLURUUDLLRRLLDDLUDLURDDRUDRLDDLURLRULULURLLDRRURULUUUDRURLLURUULLRLDUDDRRUDLRDDURDURRRRLDLLULLLDDDLDLRDDRLRRRURLLRLDLDRRRDRLRDRULDLUURDUDURUDLLRDUURLRLDUDRRLLRDRDDUURUDRRDUDURLURDLLRULURDLLDRDLDDRUDURULUDLRRLRUDDRDURUDLLLDUDLDULRULRLLDUDURUDULUDLUDRLULRURLDRUURLULUDLLDDLLDURLLRULDUUUURLDLRLDDLRLRLUURLRDRLRDDRRLRRLRLDDUURLDDDRURRURLRUDDRLLRLULDRLUURUULLDRUDRRURLLRLRULLRDURRDLDDLULLLUUDUDUUDULURDRRRDLUDLRRUDURDLDURDDRLLRULLUDRRULDRLLDDDDLLUUULURRDRLRLLDULLRDRDLLRDRDLURUDRDRRULDRUULLLLUULLRRUDRDUUUDRULRDDLLRRDUURLLLRLUDLRDRLRULRDLRRDDURRRRURRULDLDRLLDDRDULDLDLUDDDLDDDUUDURDLURRRDDDRULRRRDUDLDLRRRUURULRRRDRRURUDURLLLDDUDLLRUDLRLRLLDLLURDRUUUDURRLLURLLDUDDDRURLRLRDUUUDRULRLLRDDDLURULRDRUUUURRLLULLURLDDDRUUUDDLDULRRRRUURURLLDLUULRLRDRLDURLDDRLURDRLDRDDLRRUDRURRLRUDDDDURRLLDLDLDRUDUDRRDRUURURDRRRUUUDRRRLUDRRLRRRRURRDLRLLRDRLDLRDRUDLRRRULLLDDLDDDURRRDDRLDDRRUDLULDRDURRLLDRULUDLRUDULURRLLLLRDRDLLLLLLUURRUDRDRRDURRDLLRDDDULULURULDLLDDDDLULDRRLRRRDDLLLRRUUDURDLUUUDDDLULUDDRRULLLUUULURRUURRLLRLLURULRLLDRDUUURLURLLRLDRLDLURDLDDLDRDRDLRRRRRLDRDRDDDRUUURURURULDLDLDRDULURDLUURUDUDUDDUULRUDULLLUURRDUDDRLRULRURRDUURUUDUDLURULRUDLLDRRDDRDRLDRDLRLDRLLRRURRUDLDRDRUULDLDLDRRUDLRRRRDLLDLLURRLULRRRUDULRRRLLURURLULULDDURDRLRRDRLURUUDRRUDLUDLURLLRURUDLDUDDULULLRLLUDLURUDULDRDRRDRRLDDRLLRULDLDUDDDRDURLUDRULRRULLLRRDLDULRLDULLDRDRUUDUDDUUURULLLDDURRULLLRRUDUULRULDURLDRLURULLDULDRLRDDLUDRDDDUDRDLLRRLDRDDLRRLDUDURLDDRLUUUDUDULRLDLURLLUUDRLRRRRLDURULRULUDUURRRULRRUDUURRLLRDDDLDDRRURLDULDRDUURURRDRRURDLLLRRDUUUUDRLLUURRDURDURUDLULDDURUURDURDUUULLULLUULRDLLDRDDDLRLLRLDULUDRDDDRLUDLURDDDULDDULRRUDLLLLDRRUUUDRLDDUDULLLLDRRDDLULULULUDDRDDRRDLULLLLUUULDRDLDULRUURLUDURLDRDLDLURURUURLLRUUUURRURLLURLRLULRLRDRRDLRLDDUUDUUDRRDRLURDLLRLDRDUUURLLLURUUUDUURUUURLULRRURDDLLLLLDUUUUUUUUDDUUDUDULDLLULDLURULDRRLRRLRRRRDUUDDULDRURDUDLLDDRRLLRUDLRDLLURLUURDRUURRDRURLLUDDLRURURLDDULULLUDRRDRLUULURULRDULUUDURRLURUUDLDLLURDRRLDRDDLDLLRLLULLRULLURRRUDDUULRRUULLDURRLLDDLURDUDRDULUURDDRRULUDULLDDLRRRUDRRLUDDDDRDLLLRDDRRDURRRUUDURUUUUULUDRDLLLUUURDDRURRULLURRULUDRUDDULDDURRDURUDURLRRLLDLDDRRDULDDUDRDLRUDUUUDLUUUURLLDURLRLRRDUUDDRLRRLURRUUDUDDUURLDRDRRULLDLRLRLULDLLDDLDLRLRRRLLULRUDRLRUDLLUDLRLDDRLUDDRRULLRURDURLRDDULULRDDLRLRRURUDLRLDLDDDLDUUDDDDUDRRLUDLLUDRUDULULRLRDRDLRDRDRUDUUURUDDRDLLDRLURDRLUUDLRDRLLLRRRRRLRURLDDURURRRULDURRLLULULURDRLUDLUUUDDDUDURDULLUDDRRDDRRDRUDDULRURULUDLLDLRDUDDDRUUUDRURLUUUDLRDDRRLULUDURLUUUDRUDULUUDRUDRDRLRDLLRLURUULLULLDLRLLDRLLLLRDULRRRDDLULDULRLRLDUUURLDLURULLDLUUDULRLLDULRRULDDRDDLRLURDULRDUUDLURDLDLLRDLUURDRDRDUDDURDLLLLLRULRDDURRUDDUDDDULUDLLLLDRURDRLURURDDUUDUDLULRDLDLRUUDLDURUDLLLDRDLUDRDDUUDRRRDDDDDDLRLRLLUUDLLUUUUDRLRULURDRULUDRDURRRDLRLRLURLURRUDLURRRDLRRRDRUDLUURLRDDDDURLRRLDDLUUDDRUDLDULLLLLDULRDRUDRLDLULRLLURURUDDDDRURLLULURUUUDRLLDRUUDRUDRRDUULDULULDUUDUUDULULUDDDLRULURLDRLRULLUURUDUUDLURLRUUUDLRDURULURDURRLRUDRDDULRULLRLLURURUURURRRURLRDDRLUUUURRDDDURRULRULURLRLDRLRLRULLULLDDDLLRLDLRRLRDLLRDUUULRLLRUUURLDURRRLDUDUURRDDDDLLDLUDULUDLUUUDUUURLLURLULLDRRLDDURLDUUDDRLDRRDRUDLLDDUDULLRLDDRDUDLULRDDDLUDUUDDLRLRRRRLDRULURRUDDDRDLULDURDUULLRULRRDDUUDRUULDDULUDUURDDRLDRUURULLRRRUUURUUDDLDRLLURLDUDUDUUDRDRDURUURURRDDDRLUDDUURLUULLULRURRDULLUDLUURDDLRLUULURUDRLRUDLUUDDURRDULDDDLLUDUULRUDRDDLUDRRDRULUULDUULDDUUDDUDRRLDRRLDURURURRLRRUUUULDLLDRULDRDRUULLDLDDDDDDUUUUDUDRLRLRLLDRDRLLRDUDRLLDRRLRULUDRDUDULULULLLDUUUDUDDLULLRUDRLDUDLDLLRRDUDRLLRLLDLULDUURRUURLLRUUULRUDUULRLULURRLRDRRDLLDRDUDDUDDLUDUUDLRRRLRLDLDRDUUULLRULUDLDLULUULDRLDLUUUDLDUUDDURRRRDRURURRLRUDURRDDRLDUULDURLULDRLLLLDRDUDUULDRDLUUUDDDRLDLULDDDRRUDURRUURDRUUURDDRLLULULUUUDDDUUDLUUDUDUDUDLUURDRDRURRLURLDURLUDUUDDDLDLLLURLRULDULURUURLLRDUULUUUDDLLUDDUURUUDDURDURLRDULRULDURDDUURUDUDDUDDDLLDRLUDDLDRDDLLDDULDULLDLRLLURULDDDRDRURUUULLRRRRLURULULDLDDDDRRLDLRURRURRLDLLUDUUUURULULRLUUDRLLDLLUDRRUDURRUURDDRUDLUUDLULURULULDDRUUUDDRDDRULUULLLRLRDLDDDLUDUDLUDRULURRDLUURULDLDRDRDRULDURDDLDLDDDDUULRULLUDRLLLUDRRLDULUDULRLRURUDURUUDLDLDRDRRLLLURLRRURLRDDRDLUDDUDLLLDRLLLDUUUDRLURLRDDULDDUDLDLUUULDUURLLRRLULUUDRRLUUDDDDRURDURDLUDRRUDLRRRDRRRLRDRRLUUURURUULLRLRLDRRRLLLUDLRUDURURRURRDLRDUDULDLRUDLRRDRDRLDULUUDRUULDLLRLRRUULRDRLURRRULDDLRDLDULDRUUDRLULRDULLUULRRDRDLURDDDLDUUUUUDRLLDDRLUDLURDUUUDLUDRDLLLLLRLLUDULRLDDLLRLDULDUURUDRDRDRLRLUDRLDDDRRLDDDURDLUDLUDRRLRUDDRUDURRDUUDRLLDRLUUDUDRULRRULRLRLLULDUUDUDDRRLLLLRRLULRRDLRRLDLURRRURRLRURLRDDDRUUDURURURRUDULDUDUUURLURDLRLRUDRDRUURRULLURRRDRUDRDDLDURRRLRURLDLLDLLDUULURDDLDLLLRURURRRDLRDUURRDDDRLDDLDLRRRDDLDDDDDUULLURRURLLURDLULUDURDRDLDLURRDRRRLRRDULRLLLRDLDDUDDDULRLURDRUULULLRRLDLURURURULRDRUDDRRDRUURDLRRULRLRDLRLDRDDDULUUUDRRLLULLDDDUDURURDLLRULUDRUUUUUDRRULRLUURDDDDUDDDRRURDUDDUDDUDLUULLUDLUURDDDLLLRLDUDRULUDRDDURDDLRDRDDRDRDLDRUUDDURUDDULDDRDDDLRURLLDDRULDDLDDRLLLRRURDDDULLDDDLURUDURDRULDDUURLRLDRLLURLLDURLLUDLDDDRUDDDLDLDRDUUULLUDDLLDLURLDDRLLLRRUUDDLLDRLDRUURDDLRLURDLULDRUULRULUDDLLUDUUDURRDDLRDLURLLDDLDRDDLDLRRDRUDRLDRDLURDLDDDURLDDRDLURRRLLUDRDDDLULUUDDLRLURDLULLDULURDLDDUULDDUDRUDDDUURURULRLUDLRDDUURLURUDDDLUDRDRRDLRURLUDLDUDLDLLUULUURDDDDRDRLUUUUDRLDDULDLULURRUDRUDULLDDRURUDRULRLRULDDUDRUULULDDRDRDRUDRRDULDLDRDDDLLLULLUURLLUDRRRLRULLDLULDLDLRLDLUDURDULULLDLDUUUULLDDLRLUUUURDLRLLLULUUDLDRRLRRLLDURURDUUDURRLLDUDDRDDUURRRDLRRUURRURUDRLDLDUULUDURRDRRULLDDDDDLUDLRDRLRDUUDDRDLRDDUUUDRRLUURDLULDRUULRDLULRRULLDRLDURURLURDLLDURDURRUDDURDRRRDULRLLRLDDRDLDRUDLDLDULLDLLLDDDLLUDULULUDDDULUUULDLRDULLLUDRDLDRLLRDRLDURLULLULUDURLUDDLDLDRULLRULURUDURRUDDDRDLRUDRLLDRULLUUDRDRRURUULRDUULRDURLDLURURRLLURRRULRUDRDRRLRRURDULRLURDULDRUDLRULDRLLRRLLDDDDULLLDURUDRRLLRRURULURDRLUDULLLRRUDDLDULRUDDLDDRUDDUULRRRURDRDULLLRURULLUUULDDDDLRDLDDDUDDDULLLUULURLRLLRLUURLDDDLRLRDRDLUDULUDLLDLUUULRLLRDUULDRDULLRRURDDLDLURRLRULDRURRDURRDLDDDRUUUUDDLLRLDLDULRDLUDDDDUDLRLUUDUUDULLLUDDLULLLDUUDDDRLLUUDLUDRDDDDRRUUDDLDRURUUULDDDRRDUURUDLDRRRLRRLUUUDRDURDUDRLLLDRLLLRRDULURDRLRRLUUDDDDLDLDRDUDULRRDLULDUDLUUDRLDUULDDDLRLLULRDDLULUUUDULRULDUULUUDDDLRDUDDRULULLLRLRURDURRDRRRRUUUDLULRDULLLLUDURRRULUULRDDRUDRDDURDRLRRUDDLDLRDLLDURDLLLUDLDURLDRUUDRRLUUUDRRLDLRDDUURLUDDDDURLRRLDLDRLLRUDRLLDLRLLRDDRLLUULULLRDRLLLUUDUDURRDDRRRLDULRLLRDLLRLRLUDUULDDRLURRDLRUUUDLRRDRURDRDUDDDDLRRRRDRLUUURUURDRRDULDRRDDRLLUUUURRRULDULDURDRUULDUURURUDLLRRLURDRLDLRLUULRDDULUDLUULUURLRRDDRURLLUUDLDDUURLUDLLRLLLLRDDLULRRRLLDRLRDRULURUUULLUUDLRURULULDRDUDRRULURLLRLLULULLDRUURUUDULRRURDRLDDLURDUDRUUULLDLRDDRDRRRLLRDRLRURDDRLDULDULRRRDLURDDLUUULUDLLULLDRDUUDLDLUDDRLRRDUURUURLUUURURDLLLLRRUUDUDLRUDLDDLDDLUURDULDRRRLDDDUDDLDRUURLLURUDDRLDLRDUUDRURUDUURDLUURDRDRUUUDDRRLDLUDRDURUUUUURDRULLDDRUDRURDRLRUDRDUUDRUDRULRLDRURUDLURDDLLUULDDDLDLUULDURRRDULDRLLDLDRRRDUURDDDRRRRRDDRUULDDULULDLDLDULLULLDRRDLLULRDDULUDRUURRDDURLUDDDRRLRLRDUURRDDRRDDLDDLULRUDLDRRLLLUDUURUULRDRRDUURLDDLRDRURURLLLULRULLULDRUULDDLURRLDLRURLULULUUDUURLULRRLULRDURUUDDLULDLLULDULLULDRLRLLDLUURUURUDDRLRUUDURLDDUDULULDRURDURDDRUDDDURUDRLDLULUDUURULURRRDRRLULLLRULLURLLDURRUURURURRRLRUDLLLUDUUDLLDLUURDRLDRLLLLDDDRULULULRDLRLDDURLULRRUULLLUURDLLLURUUDRLULUDUUULULDRLDDDUDDRRRLDRDDULDLLRLRRRRDRDLRUUUDULLRDLDLDLRDDURRULRRDLDUURRURUDRLRRRDUDRRUUUDURDLLURDDRDDRDURLUDDRURRDLLDLLLLLRUUURDDRLLLRRDDRLRLLLDRUUULLRDULDDLDLUUDLLUDRLUDDLRRULRULDLDLRUUULDLLDRDRULLLRRRDLLDUDDLLUUDRUDRLLDDRDLLDUURRRLDDULDDURRURURRDLLRRRLUDUDDUUDRLLULUDRUDRUURRUDDLUDDRDLRRRURURLLUURDURLRURLRRRDDULLRRULLRLLULULLUDRUDLRDDLUUDDDDRRURRRDLDRLRRDDULDURRUUULDURLDDLUDDRULDLLUDDDRDRULRRLRRUURRRUUDULLRLUUULULUDDDDDRUUDRRDULDRLDULRLDLLDLDLUDRDLULLULRUDDURLRDRRRRDUDRLRUUUDRDUUULULDUULURURDULURRDURRRRRRDLDDLDRRRURRRURRRURLULDDLUULURDDLLLURDRRDRLURDULDRULLLRULULLRURDLDLLLDDUURURDULLULULUULRUDDRDDDRLRDDULDDLDURLLDLDLUDLLULRLDURLUDDDLLURRLDRDRLLDRUDULRDURRLRLURRLDLUDDRRLLUDULLRRRUDRDLLUUDLUDDLLRLRDDLRULDUURURRUDLDRUDRDRRLULUUURDLDULRDLUDLRULULRRLULRRLLUULUULDLRDURRRRUDLUURLRLUUDRRRDRRURRLULDLLUDDRDRLDRDRLRRLULLRUDLUDLLDURRLUUURDRDLLLDULURLRDLRLURRLDDLUUDUDDULUDDLULLLRDULLLDDRUUDDDUDLDLRLLDLRLURDLDUULLLURRRRUDUDDDRLRLUDULDLLURULRUUDRUULURLDRULDRUULULLLRUURUUDRDDDULDLLDDRUDDDUDLLDUURRDRLDRUUUDDURRRDUUUUDDLDLUURUULRDDDLDDRDRULLRDURDUULLLRULRULULDDULUDURLRRUDRDDLLLLUUUUULRUURRDDRUDUUULRRRULULDRURRUURULRDRLUURRUURUUDRUUULDLRULRRLRRLDLRUURDULDUDLDRDDRDRURRUDLURDRLLDDRDDUDRDLDRRUDURLRULLURUURDRDUULRLRRRRUDUUUUDURRURDLUDRUUUUDUURRLRLLLRRLRULUUDRUDDRDLLDLLDRRLLLUDDLRULDRLRRLDLRLRLRDUURLLLDUDUULDRLDDRURRRDUDULDLDLLDLDRULRDLUURR"));

            Console.ReadLine();
        }

        public static bool JudgeCircle(string moves)
        {
            int posX = 0, posY = 0;

            for (int i = 0; i < moves.Length; i++)
            {
                switch (moves[i])
                {
                    case 'U':
                    case 'u':
                        posY += 1;
                        break;

                    case 'D':
                    case 'd':
                        posY -= 1;
                        break;

                    case 'L':
                    case 'l':
                        posX -= 1;
                        break;

                    case 'R':
                    case 'r':
                        posX += 1;
                        break;
                }
            }

            return ((posX == 0) && (posY == 0));
        }
    }
}
